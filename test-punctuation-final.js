// ╫С╫У╫Щ╫з╫к ╫С╫в╫Щ╫Х╫к ╫д╫Щ╫б╫Х╫з ╫Х╫ж╫Ю╫Щ╫У╫Х╫к ╫Т╫и╫й╫Щ╫Щ╫Э - ╫Т╫и╫б╫Ф ╫б╫Х╫д╫Щ╫к
function testPunctuationFinal() {
  console.log('ЁЯзк Testing punctuation issues with correct logic...');

  const testCases = [
    '╫Ф╫Х╫Р ╫Р╫Ю╫и"╫Р╫а╫Щ ╫Ф╫Х╫Ь╫Ъ ╫Ф╫С╫Щ╫к╫Ф".',
    '╫Ф╫б╫д╫и"╫к╫Х╫и╫Ф" ╫а╫Ю╫ж╫Р ╫в╫Ь ╫Ф╫й╫Х╫Ь╫Ч╫Я.',
    '"╫Ю╫Ф ╫Р╫к╫Ф ╫Р╫Х╫Ю╫и"╫й╫Р╫Ь ╫Ф╫и╫С.',
    '╫Р╫Ю╫и"╫й╫Ь╫Х╫Э."╫Х╫Ф╫Ь╫Ъ.',
    '╫Ф╫Э ╫з╫и╫Р╫Х"╫й╫Ю╫в ╫Щ╫й╫и╫Р╫Ь".╫Ф╫Щ╫Х╫Э.',
    '"╫С╫и╫Х╫Ъ ╫Ф╫й╫Э"╫Р╫Ю╫и ╫Ф╫Щ╫Ь╫У.',
  ];

  testCases.forEach((testCase, index) => {
    console.log(`\\n--- Test ${index + 1} ---`);
    console.log('╫Ь╫д╫а╫Щ:', testCase);

    let text = testCase;

    // ╫й╫Ь╫С 1: ╫к╫Щ╫з╫Х╫Я ╫Т╫и╫й╫Щ╫Щ╫Э ╫д╫Х╫к╫Ч╫Щ╫Э ╫ж╫Ю╫Х╫У╫Щ╫Э ╫Ь╫Ю╫Щ╫Ь╫Ф ╫в╫С╫и╫Щ╫к (╫Ю╫Щ╫Ь╫Ф"╫Ш╫з╫б╫Ш -> ╫Ю╫Щ╫Ь╫Ф "╫Ш╫з╫б╫Ш)
    // ╫Р╫С╫Ь ╫и╫з ╫Р╫Э ╫Ц╫Ф ╫Ь╫Р ╫к╫Ч╫Щ╫Ь╫к ╫й╫Х╫и╫Ф ╫Р╫Х ╫Р╫Ч╫и╫Щ ╫и╫Х╫Х╫Ч
    text = text.replace(/([╫Р-╫к])"([╫Р-╫к][^"]*)/g, '$1 "$2');

    // ╫й╫Ь╫С 2: ╫к╫Щ╫з╫Х╫Я ╫Т╫и╫й╫Щ╫Щ╫Э ╫б╫Х╫Т╫и╫Щ╫Э ╫ж╫Ю╫Х╫У╫Щ╫Э ╫Ь╫Ю╫Щ╫Ь╫Ф ╫Ф╫С╫Р╫Ф
    // ╫Ц╫Щ╫Ф╫Х╫Щ ╫Т╫и╫й╫Щ╫Щ╫Э ╫б╫Х╫Т╫и╫Щ╫Э: ╫Щ╫й ╫к╫Х╫Ы╫Я ╫Ь╫д╫а╫Щ ╫Ф╫Т╫и╫й╫Щ╫Щ╫Э ╫Х╫Р╫Щ╫Я ╫в╫Х╫У ╫Т╫и╫й╫Щ╫Щ╫Э ╫Р╫Ч╫и╫Щ╫Ф╫Э ╫Ю╫Щ╫У
    text = text.replace(/([╫Р-╫к][^"]*[╫Р-╫к])"([╫Р-╫к])/g, '$1" $2');

    // ╫й╫Ь╫С 3: ╫к╫Щ╫з╫Х╫Я ╫Ю╫з╫и╫Щ╫Э ╫й╫Ь ╫а╫з╫Х╫У╫Ф ╫Р╫Ч╫и╫Щ ╫Т╫и╫й╫Щ╫Щ╫Э (╫ж╫и╫Щ╫Ы╫Ф ╫Ь╫Ф╫Щ╫Х╫к ╫Ь╫д╫а╫Щ)
    text = text.replace(/([╫Р-╫к])\\."/g, '$1".');

    // ╫й╫Ь╫С 4: ╫Ф╫Х╫б╫д╫к ╫и╫Х╫Х╫Ч ╫Р╫Ч╫и╫Щ ╫а╫з╫Х╫У╫Ф+╫Т╫и╫й╫Щ╫Щ╫Э ╫Ы╫й╫Ф╫Э ╫ж╫Ю╫Х╫У╫Щ╫Э ╫Ь╫Ю╫Щ╫Ь╫Ф
    text = text.replace(/"\\.([╫Р-╫к])/g, '". $1');

    // ╫й╫Ь╫С 5: ╫к╫Щ╫з╫Х╫Я ╫Ю╫з╫и╫Щ╫Э ╫а╫Х╫б╫д╫Щ╫Э ╫й╫Ь ╫Т╫и╫й╫Щ╫Щ╫Э ╫б╫Х╫Т╫и╫Щ╫Э
    // ╫Р╫Э ╫Щ╫й ╫а╫з╫Х╫У╫Ф ╫Р╫Х ╫д╫б╫Щ╫з ╫Ь╫д╫а╫Щ ╫Ф╫Т╫и╫й╫Щ╫Щ╫Э, ╫Ц╫Ф ╫Ы╫а╫и╫Р╫Ф ╫Т╫и╫й╫Щ╫Щ╫Э ╫б╫ХрдЧ╫и╫Щ╫Э
    text = text.replace(/([.,!?])"([╫Р-╫к])/g, '$1" $2');

    // ╫а╫з╫Ф ╫и╫Х╫Х╫Ч╫Щ╫Э ╫Ю╫Щ╫Х╫к╫и╫Щ╫Э
    text = text.replace(/\\s{2,}/g, ' ');

    console.log('╫Р╫Ч╫и╫Щ:', text);
  });
}

testPunctuationFinal();
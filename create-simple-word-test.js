const fs = require('fs');
const path = require('path');

// ◊§◊ï◊†◊ß◊¶◊ô◊î ◊§◊©◊ï◊ò◊î ◊ú◊ô◊¶◊ô◊®◊™ Word ◊ë◊ê◊û◊¶◊¢◊ï◊™ Python (◊î◊©◊ô◊ò◊î ◊©◊¢◊ï◊ë◊ì◊™)
async function createSimpleWordTest() {
  try {
    console.log('üß™ Creating simple Word document using Python method...');

    // ◊ò◊ß◊°◊ò ◊ì◊ï◊í◊û◊î ◊¢◊ù ◊°◊ô◊û◊†◊ô ◊§◊ô◊°◊ï◊ß
    const sampleText = `◊©◊ú◊ï◊ù ◊ï◊ë◊®◊õ◊î! ◊î◊ô◊ï◊ù ◊ê◊†◊ô ◊®◊ï◊¶◊î ◊ú◊ì◊ë◊® ◊¢◊ú ◊†◊ï◊©◊ê ◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì.

◊î◊ê◊ù ◊ñ◊î ◊ë◊ê◊û◊™ ◊õ◊ú ◊õ◊ö ◊ó◊©◊ï◊ë? ◊õ◊ü, ◊ê◊†◊ô ◊ó◊ï◊©◊ë ◊©◊ñ◊î "◊ß◊®◊ô◊ò◊ô" ◊ú◊¢◊™◊ô◊ì◊†◊ï.

◊ê◊†◊ô ◊ñ◊ï◊õ◊® ◊©◊§◊¢◊ù ◊ê◊û◊® ◊ú◊ô ◊û◊ô◊©◊î◊ï: "◊™◊û◊ô◊ì ◊™◊ñ◊õ◊ï◊® ◊ê◊™ ◊î◊ú◊ß◊ó ◊î◊ñ◊î!"

◊î◊©◊ê◊ú◊î ◊î◊ô◊ê ◊û◊î ◊ê◊†◊ó◊†◊ï ◊¢◊ï◊©◊ô◊ù ◊¢◊ù ◊ñ◊î ◊¢◊õ◊©◊ô◊ï?`;

    // ◊õ◊™◊ô◊ë◊™ ◊î◊ò◊ß◊°◊ò ◊ú◊ß◊ï◊ë◊• ◊ñ◊û◊†◊ô
    const tempTextFile = path.join(__dirname, 'temp_text.txt');
    fs.writeFileSync(tempTextFile, sampleText, 'utf8');

    // ◊ô◊¶◊ô◊®◊™ ◊ß◊ï◊ë◊• Python ◊ñ◊û◊†◊ô
    const pythonScript = `
import sys
import os
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn

def create_word_doc():
    try:
        # ◊ß◊®◊ô◊ê◊™ ◊î◊ò◊ß◊°◊ò
        with open('temp_text.txt', 'r', encoding='utf-8') as f:
            text = f.read()

        # ◊ô◊¶◊ô◊®◊™ ◊û◊°◊û◊ö ◊ó◊ì◊©
        doc = Document()

        # ◊î◊í◊ì◊®◊™ ◊õ◊ô◊ï◊ï◊ü RTL ◊ú◊û◊°◊û◊ö
        sections = doc.sections
        for section in sections:
            section.page_width = Inches(8.5)
            section.page_height = Inches(11)
            section.left_margin = Inches(1)
            section.right_margin = Inches(1)

        # ◊î◊ï◊°◊§◊™ ◊õ◊ï◊™◊®◊™
        title_paragraph = doc.add_paragraph()
        title_run = title_paragraph.add_run('◊ì◊ï◊í◊û◊î ◊ú◊ò◊ß◊°◊ò ◊¢◊ë◊®◊ô ◊¢◊ù ◊§◊ô◊°◊ï◊ß')
        title_run.font.name = 'David'
        title_run.font.size = Pt(16)
        title_run.bold = True
        title_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT

        # ◊§◊ô◊¶◊ï◊ú ◊ú◊§◊°◊ß◊ê◊ï◊™
        paragraphs = text.split('\\n\\n')

        for para_text in paragraphs:
            if para_text.strip():
                paragraph = doc.add_paragraph()
                run = paragraph.add_run(para_text.strip())
                run.font.name = 'David'
                run.font.size = Pt(12)
                paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT

                # ◊î◊í◊ì◊®◊™ RTL
                paragraph._element.get_or_add_pPr().append(
                    paragraph._element._new_bidi()
                )

        # ◊©◊û◊ô◊®◊™ ◊î◊û◊°◊û◊ö
        doc.save('simple-test-output.docx')
        print('‚úÖ Python Word document created successfully!')
        return True

    except Exception as e:
        print(f'‚ùå Error: {e}')
        return False

if __name__ == '__main__':
    create_word_doc()
`;

    const pythonFile = path.join(__dirname, 'temp_word_creator.py');
    fs.writeFileSync(pythonFile, pythonScript, 'utf8');

    // ◊î◊®◊¶◊™ ◊î◊°◊ß◊®◊ô◊§◊ò
    const { spawn } = require('child_process');
    const python = spawn('python', [pythonFile], {
      cwd: __dirname,
      stdio: 'inherit'
    });

    python.on('close', (code) => {
      // ◊†◊ô◊ß◊ï◊ô ◊ß◊ë◊¶◊ô◊ù ◊ñ◊û◊†◊ô◊ô◊ù
      if (fs.existsSync(tempTextFile)) fs.unlinkSync(tempTextFile);
      if (fs.existsSync(pythonFile)) fs.unlinkSync(pythonFile);

      if (code === 0) {
        console.log('üìÅ Simple Word document created: simple-test-output.docx');
        console.log('üîç This document should be easier to open and view');
        console.log('üìù It contains 4 paragraphs with Hebrew text, punctuation, and RTL alignment');
      } else {
        console.log('‚ùå Python script failed');
      }
    });

  } catch (error) {
    console.error('‚ùå Error creating simple Word test:', error);
  }
}

// ◊ë◊ì◊ô◊ß◊î ◊ê◊ù Python ◊ñ◊û◊ô◊ü
function checkPython() {
  const { spawn } = require('child_process');
  const python = spawn('python', ['--version']);

  python.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Python is available, creating test document...');
      createSimpleWordTest();
    } else {
      console.log('‚ùå Python not available, cannot create test document');
      console.log('üí° Try opening the existing files:');
      console.log('   - current-method-output.docx');
      console.log('   - FIXED-method-output.docx');
    }
  });

  python.on('error', () => {
    console.log('‚ùå Python not found, cannot create test document');
    console.log('üí° Try opening the existing files:');
    console.log('   - current-method-output.docx');
    console.log('   - FIXED-method-output.docx');
  });
}

if (require.main === module) {
  checkPython();
}

module.exports = { createSimpleWordTest };